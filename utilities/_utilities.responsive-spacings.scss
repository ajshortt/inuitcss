/* ==========================================================================
   #RESPONSIVE-SPACINGS
   ========================================================================== */

/**
 * Utility classes enhancing the normal spacing classes by adding responsiveness
 * to them. By default, there are not responsive spacings defined. You can
 * generate responsive spacings by adding entries to the following three Sass
 * maps which are found in settings/_settings.responsive.scss:
 *
 * - $inuit-responsive-spacing-directions
 * - $inuit-responsive-spacing-properties
 * - $inuit-responsive-spacing-sizes
 *
 * Defining these responsive settings can produce the following
 * exmaple classes:
 *
 *   .u-margin-small@mobile {}
 *   .u-margin-small@tablet {}
 *   .u-margin-small@desktop {}
 *   .u-margin-small@wide {}
 *   .u-margin-bottom-small@mobile {}
 *   .u-margin-bottom-small@tablet {}
 *   .u-margin-bottom-small@desktop {}
 *   .u-margin-bottom-small@wide {}
 */



// The responsive spacings just make sense and work properly when the ‘normal’
// spacings are included, too. In case they're not, we set `_utilities.spacings`
// to `null`.
$inuit-spacing-directions: null !default;

// If the ‘normal’ spacings partial is not included, we provide an error message
// to indicate this.
@if $inuit-spacing-directions == null {
  @error "In order to use responsive spacings, you also need to include `_utilities.spacings.scss`!";
}
@else {




/* stylelint-disable max-nesting-depth */

// Don't output anything if no responsive spacings are defined.
@if ($inuit-responsive-spacing-properties != null) {

  @each $property-namespace, $property in $inuit-responsive-spacing-properties {

    @each $direction-namespace, $direction-rules in $inuit-responsive-spacing-directions {

      @each $size-namespace, $size in $inuit-responsive-spacing-sizes {

        @each $inuit-bp-name, $inuit-bp-value in $mq-breakpoints {

          @include mq($from: $inuit-bp-name) {

            .u-#{$property-namespace}#{$direction-namespace}#{$size-namespace}#{$inuit-widths-breakpoint-separator}#{$inuit-bp-name} {

              @each $direction in $direction-rules {
                #{$property}#{$direction}: $size !important;
              }

            }

          }

        }

      }

    }

  }

}

/* stylelint-enable max-nesting-depth */

}
